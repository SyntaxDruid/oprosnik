/**
 * filler.js - –í–µ—Ä—Å–∏—è: 2.4
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
 * –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ Bootstrap –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
 */

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
let CONFIG = null;

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
async function loadConfig() {
    try {
        const response = await fetch(chrome.runtime.getURL('config.json'));
        CONFIG = await response.json();
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ filler.js:', CONFIG.version);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ filler.js:', error);
        // Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        CONFIG = {
            version: '2.4',
            selectors: {
                commentField: {
                    primary: '#comment_',
                    alternatives: [
                        'textarea[name="comment"]',
                        'textarea[id*="comment"]',
                        '.form-control[placeholder*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]',
                        'textarea.form-control'
                    ]
                },
                targetButtons: {
                    strategies: [
                        { name: '–ü–æ ID', selector: '#create_inst' },
                        { name: '–ü–æ –∫–ª–∞—Å—Å—É –∏ —Ç–µ–∫—Å—Ç—É', selector: 'button.btn-primary', text: '–û—Ç–≤–µ—Ç–∏—Ç—å' }
                    ]
                }
            },
            ui: {
                button: {
                    text: '–í—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ',
                    className: 'btn btn-success oprosnik-helper-btn',
                    height: '38px',
                    fontSize: '16px'
                }
            },
            dataFormat: {
                template: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n–†–µ–≥–∏–æ–Ω: {region}\n'
            }
        };
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Chrome API
const diagnostics = {
    chromeAvailable: typeof chrome !== 'undefined',
    runtimeAvailable: typeof chrome !== 'undefined' && chrome.runtime,
    sendMessageAvailable: typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.sendMessage
};

let messageAPI = null;

function initializeMessageAPI() {
    if (diagnostics.sendMessageAvailable) {
        messageAPI = chrome.runtime;
        return true;
    }
    return false;
}

function safeSendMessage(message, callback) {
    if (!messageAPI) {
        console.error('‚ùå Message API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        callback({ status: 'error', message: 'API —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
        return;
    }

    try {
        messageAPI.sendMessage(message, (response) => {
            if (messageAPI.lastError) {
                callback({ 
                    status: 'error', 
                    message: messageAPI.lastError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
                });
            } else {
                callback(response);
            }
        });
    } catch (error) {
        callback({ 
            status: 'error', 
            message: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ' + error.message 
        });
    }
}

function showCallHistoryModal(callHistory) {
    console.log('üìö –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–≤–æ–Ω–∫–æ–≤:', callHistory.length);
    
    // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
    `;
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.style.cssText = `
        background: white;
        border-radius: 8px;
        padding: 20px;
        max-width: 600px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    `;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    modal.innerHTML = `
        <h3 style="margin-top: 0; color: #333;">–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–æ–Ω–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏</h3>
        <p style="color: #666; margin-bottom: 20px;">–ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${callHistory.length}</p>
    `;
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–≤–æ–Ω–∫–æ–≤
    const callList = document.createElement('div');
    callList.style.cssText = 'display: flex; flex-direction: column; gap: 10px;';
    
    callHistory.forEach((call, index) => {
        const callItem = document.createElement('div');
        callItem.style.cssText = `
            border: 2px solid #e0e0e0;
            border-radius: 5px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.2s;
            background: #f9f9f9;
        `;
        
        callItem.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: start;">
                <div>
                    <strong style="color: #333;">üìû ${call.phone}</strong>
                    <div style="color: #666; font-size: 14px; margin-top: 5px;">
                        ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${call.duration}<br>
                        üìç –†–µ–≥–∏–æ–Ω: ${call.region}<br>
                        üïê –í—Ä–µ–º—è: ${call.capturedAt}
                        ${call.capturedDate ? `<br>üìÖ –î–∞—Ç–∞: ${new Date(call.capturedDate).toLocaleDateString()}` : ''}
                    </div>
                </div>
                <div style="text-align: right; color: #999; font-size: 12px;">
                    ${index === 0 ? '<span style="color: #4CAF50; font-weight: bold;">–ü–æ—Å–ª–µ–¥–Ω–∏–π</span>' : `#${index + 1}`}
                </div>
            </div>
        `;
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        callItem.onmouseenter = () => {
            callItem.style.borderColor = '#4CAF50';
            callItem.style.background = '#f0f8f0';
        };
        
        callItem.onmouseleave = () => {
            callItem.style.borderColor = '#e0e0e0';
            callItem.style.background = '#f9f9f9';
        };
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        callItem.onclick = () => {
            pasteDataIntoComment(call);
            document.body.removeChild(overlay);
        };
        
        callList.appendChild(callItem);
    });
    
    modal.appendChild(callList);
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeButton = document.createElement('button');
    closeButton.textContent = '–û—Ç–º–µ–Ω–∞';
    closeButton.style.cssText = `
        margin-top: 20px;
        padding: 10px 20px;
        background: #666;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
    `;
    closeButton.onclick = () => document.body.removeChild(overlay);
    modal.appendChild(closeButton);
    
    overlay.appendChild(modal);
    document.body.appendChild(overlay);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
    overlay.onclick = (e) => {
        if (e.target === overlay) {
            document.body.removeChild(overlay);
        }
    };
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É.
 */
function createPasteButton() {
    console.log('üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏...');
    
    let attempts = 0;
    const maxAttempts = 10;
    
    const tryCreateButton = () => {
        attempts++;
        let targetButton = null;
        let targetContainer = null;
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const searchStrategies = [
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –ø–æ ID
            () => {
                const btn = document.getElementById('create_inst');
                if (btn) {
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ ID: create_inst');
                    return { button: btn, container: btn.parentElement };
                }
                return null;
            },
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" —Å –∫–ª–∞—Å—Å–æ–º btn-primary
            () => {
                const buttons = document.querySelectorAll('button.btn-primary');
                for (const btn of buttons) {
                    if (btn.innerText && btn.innerText.trim() === '–û—Ç–≤–µ—Ç–∏—Ç—å') {
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å" –ø–æ –∫–ª–∞—Å—Å—É btn-primary');
                        return { button: btn, container: btn.parentElement };
                    }
                }
                return null;
            },
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –û–±—â–∏–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º "–û—Ç–≤–µ—Ç–∏—Ç—å"
            () => {
                const selectors = ['button', 'input[type="submit"]', '.btn'];
                for (const selector of selectors) {
                    try {
                        const elements = document.querySelectorAll(selector);
                        for (const el of elements) {
                            if (el.innerText && el.innerText.includes('–û—Ç–≤–µ—Ç–∏—Ç—å')) {
                                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
                                return { button: el, container: el.parentElement };
                            }
                        }
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É:', selector, e);
                    }
                }
                return null;
            },
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–æ—Ä–º—ã (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –≤ —Ñ–æ—Ä–º–µ)
            () => {
                const forms = document.querySelectorAll('form');
                for (const form of forms) {
                    const buttons = form.querySelectorAll('button[type="button"], input[type="submit"]');
                    if (buttons.length > 0) {
                        const lastBtn = buttons[buttons.length - 1];
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –≤ —Ñ–æ—Ä–º–µ');
                        return { button: lastBtn, container: lastBtn.parentElement };
                    }
                }
                return null;
            }
        ];
        
        // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞
        let result = null;
        for (const strategy of searchStrategies) {
            result = strategy();
            if (result) {
                targetButton = result.button;
                targetContainer = result.container;
                break;
            }
        }
        
        if (!targetButton) {
            console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}: –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            
            if (attempts < maxAttempts) {
                setTimeout(tryCreateButton, 500);
            } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å" –ø–æ—Å–ª–µ', maxAttempts, '–ø–æ–ø—ã—Ç–æ–∫');
                showDiagnosticInfo();
            }
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –Ω–∞—à–∞ –∫–Ω–æ–ø–∫–∞
        const existingButtons = document.querySelectorAll('.oprosnik-helper-btn');
        let validButtonExists = false;
        
        existingButtons.forEach(btn => {
            if (btn.tagName === 'BUTTON' && btn.innerText.includes('–í—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ') && btn.onclick) {
                validButtonExists = true;
                console.log('‚úÖ –†–∞–±–æ—á–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            } else {
                console.log('üîß –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é/–Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –∫–Ω–æ–ø–∫—É:', btn);
                btn.remove();
            }
        });
        
        if (validButtonExists) {
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        let buttonContainer = targetContainer;
        const needsContainer = !targetContainer.classList.contains('oprosnik-buttons-container');
        
        if (needsContainer) {
            buttonContainer = document.createElement('div');
            buttonContainer.className = 'oprosnik-buttons-container';
            buttonContainer.style.cssText = `
                display: flex;
                gap: 10px;
                align-items: center;
                flex-wrap: wrap;
            `;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        const pasteButton = document.createElement('button');
        pasteButton.innerText = CONFIG.ui.button.text;
        pasteButton.type = 'button';
        pasteButton.className = CONFIG.ui.button.className;
        pasteButton.style.cssText = `
            height: 44px !important;
            font-size: 16px !important;
            padding: 8px 16px !important;
            min-width: 200px !important;
            white-space: nowrap !important;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        pasteButton.setAttribute('data-extension-id', chrome.runtime?.id || 'unknown');
        pasteButton.setAttribute('data-version', CONFIG.version);
        pasteButton.setAttribute('data-created-at', new Date().toISOString());

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        pasteButton.addEventListener('click', handlePasteButtonClick);

        // –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É
        try {
            if (needsContainer) {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ü–µ–ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏
                targetButton.style.cssText += `
                    height: 44px !important;
                    font-size: 16px !important;
                    padding: 8px 16px !important;
                    min-width: 120px !important;
                `;
                
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                const parentElement = targetButton.parentElement;
                buttonContainer.appendChild(pasteButton);
                buttonContainer.appendChild(targetButton);
                parentElement.appendChild(buttonContainer);
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –≤ –Ω–æ–≤–æ–º flex-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');
            } else {
                // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                buttonContainer.appendChild(pasteButton);
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                const isVisible = pasteButton.offsetParent !== null && 
                                pasteButton.clientHeight > 0 && 
                                pasteButton.clientWidth > 0;
                                
                if (!isVisible) {
                    console.error('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ –≤–∏–¥–∏–º–∞! –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏.');
                    pasteButton.style.cssText += ' display: inline-block !important; visibility: visible !important; opacity: 1 !important; position: relative !important;';
                } else {
                    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
                }
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ API —É–¥–∞–ª–µ–Ω
            }, 100);
            
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏:', e);
            
            // Fallback: –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä—è–º–æ –≤ body
            try {
                pasteButton.style.cssText += ' position: fixed !important; bottom: 20px !important; right: 20px !important; z-index: 9999 !important;';
                document.body.appendChild(pasteButton);
                console.log('üîÑ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ fallback –≤ –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª');
            } catch (fallbackError) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É:', fallbackError);
            }
        }
    };
    
    tryCreateButton();
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ API
 */
function addStatusIndicator() {
    const button = document.querySelector('.oprosnik-helper-btn');
    if (!button) return;
    
    const indicator = document.createElement('span');
    indicator.style.cssText = 'margin-left: 5px; font-size: 12px;';
    
    if (messageAPI) {
        indicator.innerHTML = '‚óè';
        indicator.style.color = '#28a745';
        indicator.title = 'API –¥–æ—Å—Ç—É–ø–µ–Ω';
    } else {
        indicator.innerHTML = '‚óè';
        indicator.style.color = '#dc3545';
        indicator.title = 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    }
    
    button.appendChild(indicator);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–∞—à—É –∫–Ω–æ–ø–∫—É.
 */
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–∞—à—É –∫–Ω–æ–ø–∫—É. (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 */
function handlePasteButtonClick(event) {
    console.log('üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞', {
        timestamp: new Date().toISOString(),
        apiAvailable: !!messageAPI,
        buttonElement: event.target
    });
    
    const button = event.target.closest('.oprosnik-helper-btn');
    if (!button) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤ —Å–æ–±—ã—Ç–∏–∏');
        return;
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–∫–∏
    if (button.dataset.processing === 'true') {
        console.log('‚è≥ –ö–Ω–æ–ø–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫');
        return;
    }
    
    button.dataset.processing = 'true';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é API
    if (!messageAPI && !initializeMessageAPI()) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API');
        button.dataset.processing = 'false';
        tryLocalStorageFallback(button);
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
    const originalText = button.innerText;
    const originalBg = button.style.backgroundColor;
    
    button.innerText = '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...';
    button.disabled = true;
    button.style.backgroundColor = '#ffc107';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background.js —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö
    safeSendMessage({ action: 'getCallData' }, (response) => {
        console.log('üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞:', response);
        
        // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        button.dataset.processing = 'false';

        if (response && response.status === 'success' && response.data) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:', response.data);
            
            // –ü–†–û–í–ï–†–ö–ê: response.data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏—Å—Ç–æ—Ä–∏–∏.
            // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏ –≤ –Ω–µ–º –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ.
            if (Array.isArray(response.data) && response.data.length > 1) {
                console.log(`üìö –ù–∞–π–¥–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–∑ ${response.data.length} –∑–≤–æ–Ω–∫–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä.`);
                button.innerText = originalText;
                button.disabled = false;
                button.style.backgroundColor = originalBg;
                showCallHistoryModal(response.data);
                return;
            
            // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –Ω–æ –≤ –Ω–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–≤–æ–Ω–æ–∫
            } else if (Array.isArray(response.data) && response.data.length === 1) {
                console.log('üìù –í –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–≤–æ–Ω–æ–∫. –í—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ.');
                pasteDataIntoComment(response.data[0]);
                showSuccessState(button, originalText, originalBg);
                return;
                
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∞—Å—Å–∏–≤, –∞ –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–∫—Ç –æ–¥–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            } else if (typeof response.data === 'object' && response.data !== null && !Array.isArray(response.data)) {
                console.log('üìù –ü–æ–ª—É—á–µ–Ω –æ–¥–∏–Ω –∑–≤–æ–Ω–æ–∫. –í—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ.');
                pasteDataIntoComment(response.data);
                showSuccessState(button, originalText, originalBg);
                return;
            
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ
            } else {
                console.log('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–±—É–µ–º fallback.');
                resetButtonState(button, originalText, originalBg);
                tryLocalStorageFallback(button);
                return;
            }

        } else {
            // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            const errorMessage = response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', errorMessage);
            resetButtonState(button, originalText, originalBg);
            tryLocalStorageFallback(button);
        }
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏
function showSuccessState(button, originalText, originalBg) {
    button.innerText = '–î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã!';
    button.style.backgroundColor = '#28a745';
    button.disabled = false;
    
    setTimeout(() => {
        button.innerText = originalText;
        button.style.backgroundColor = originalBg;
    }, 2000);
}

function resetButtonState(button, originalText, originalBg) {
    button.innerText = originalText;
    button.disabled = false;
    button.style.backgroundColor = originalBg;
}
/**
 * –ü—Ä–æ–±—É–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –∫–∞–∫ fallback
 */
function tryLocalStorageFallback(button) {
    console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage...');
    
    try {
        const history = localStorage.getItem('oprosnik_call_history');
        const lastCall = localStorage.getItem('oprosnik_last_call');
        
        if (history) {
            const callHistory = JSON.parse(history);
            if (callHistory && callHistory.length > 0) {
                console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ localStorage:', callHistory.length);
                button.innerText = '–í—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ';
                button.disabled = false;
                showCallHistoryModal(callHistory);
                return;
            }
        }
        
        if (lastCall) {
            const data = JSON.parse(lastCall);
            console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ localStorage:', data);
            pasteDataIntoComment(data);
            button.innerText = '–î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã!';
            setTimeout(() => {
                button.innerText = '–í—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ';
                button.disabled = false;
            }, 2000);
            return;
        }
        
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage');
        
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ localStorage:', e);
        alert('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–∞—Ö.\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n1. –û—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ Cisco Finesse\n2. –ë—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–≤–æ–Ω–æ–∫');
        button.innerText = '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ';
        button.disabled = false;
    }
}

/**
 * –í—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π".
 * @param {object} callData - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–≤–æ–Ω–∫–µ.
 */
function pasteDataIntoComment(callData) {
    console.log('üìù –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...');
    
    let commentTextarea = document.querySelector(CONFIG.selectors.commentField.primary);
    if (!commentTextarea) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', CONFIG.selectors.commentField.primary);
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –¥—Ä—É–≥–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        for (const selector of CONFIG.selectors.commentField.alternatives) {
            const element = document.querySelector(selector);
            if (element) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ:', selector);
                commentTextarea = element;
                break;
            }
        }
        
        if (!commentTextarea) {
            alert('–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
            return;
        }
    }
    
    insertDataIntoField(commentTextarea, callData);
}

/**
 * –í—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
 */
function insertDataIntoField(field, callData) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á—ë—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    let durationText = callData.duration || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const formattedData = CONFIG.dataFormat.template
        .replace('{phone}', callData.phone)
        .replace('{duration}', durationText)
        .replace('{region}', callData.region);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const currentValue = field.value;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    field.value = formattedData.trim() + '\n\n' + currentValue;
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü
    field.focus();
    field.setSelectionRange(field.value.length, field.value.length);
    
    // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
    field.dispatchEvent(new Event('input', { bubbles: true }));
    field.dispatchEvent(new Event('change', { bubbles: true }));
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –ø–æ–ª–µ');
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */
function showDiagnosticInfo() {
    console.group('üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
    console.log('URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', window.location.href);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã:');
    console.log('- –ö–Ω–æ–ø–∫–∏:', Array.from(document.querySelectorAll('button')).map(b => ({
        id: b.id,
        class: b.className,
        text: b.innerText
    })));
    console.log('- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è:', Array.from(document.querySelectorAll('textarea')).map(t => ({
        id: t.id,
        name: t.name,
        class: t.className
    })));
    console.groupEnd();
}

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
 * –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏: recreateHelperButton()
 */
window.recreateHelperButton = function() {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏...');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.oprosnik-helper-btn').forEach(btn => {
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º:', btn);
        btn.remove();
    });
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
    createPasteButton();
};

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugOprosnikHelper = function() {
    console.group('üêõ Debug Oprosnik Helper');
    console.log('–ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å":', document.getElementById('create_inst'));
    console.log('–ù–∞—à–∞ –∫–Ω–æ–ø–∫–∞:', document.querySelector('.oprosnik-helper-btn'));
    console.log('Chrome API:', typeof chrome !== 'undefined' && chrome.runtime);
    console.log('Extension ID:', chrome.runtime?.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    try {
        const history = localStorage.getItem('oprosnik_call_history');
        const lastCall = localStorage.getItem('oprosnik_last_call');
        console.log('–ò—Å—Ç–æ—Ä–∏—è –≤ localStorage:', history ? JSON.parse(history).length + ' –∑–≤–æ–Ω–∫–æ–≤' : '–Ω–µ—Ç');
        console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫:', lastCall ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:', e);
    }
    
    console.groupEnd();
};

// ===== –ó–ê–ü–£–°–ö =====
console.log('üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
const apiInitialized = initializeMessageAPI();
console.log('üì° API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', apiInitialized);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function initializeExtension() {
    await loadConfig();
    
    // –ñ–¥–µ–º, –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
    if (document.readyState === 'loading') {
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM...');
        document.addEventListener('DOMContentLoaded', () => {
            console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
            createPasteButton();
        });
    } else {
        console.log('‚úÖ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        createPasteButton();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initializeExtension();

console.log('‚úÖ Oprosnik Helper: Filler Script –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω');